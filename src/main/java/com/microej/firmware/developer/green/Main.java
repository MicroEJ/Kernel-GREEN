/*
 * Java
 *
 * Copyright 2021-2022 MicroEJ Corp. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be found with this software.
 */
package com.microej.firmware.developer.green;

import java.io.IOException;

import com.microej.kf.util.BooleanConverter;
import com.microej.kf.util.ByteConverter;
import com.microej.kf.util.CharacterConverter;
import com.microej.kf.util.DateConverter;
import com.microej.kf.util.DoubleConverter;
import com.microej.kf.util.FloatConverter;
import com.microej.kf.util.IProgressMonitorConverter;
import com.microej.kf.util.InputStreamConverter;
import com.microej.kf.util.IntegerConverter;
import com.microej.kf.util.ListConverter;
import com.microej.kf.util.LongConverter;
import com.microej.kf.util.MapConverter;
import com.microej.kf.util.ShortConverter;
import com.microej.kf.util.StringConverter;
import com.microej.wadapps.connectivity.ConnectivityManagerKF;

import android.net.ConnectivityManager;
import ej.bon.Timer;
import ej.kf.Feature;
import ej.kf.Feature.State;
import ej.kf.FeatureStateListener;
import ej.kf.Kernel;
import ej.microui.MicroUI;
import ej.microui.display.Display;
import ej.microui.display.Displayable;
import ej.net.HttpPollerConnectivityManager;
import ej.storage.Storage;
import ej.wadapps.Firmware;
import ej.wadapps.application.Application;
import ej.wadapps.application.ApplicationInstaller;
import ej.wadapps.application.ApplicationManager;
import ej.wadapps.common.util.StartupHelper;
import ej.wadapps.multisandbox.FirmwareKF;
import ej.wadapps.multisandbox.application.ApplicationManagerKF;
import ej.wadapps.multisandbox.application.PersistentApplicationInstallerKF;
import ej.wadapps.multisandbox.fs.storage.StorageKfFs;
import ej.wadapps.service.SharedServiceFactory;
import ej.wadapps.service.SharedServiceRegistry;

/**
 * Generated by the build-firmware-singleapp-skeleton.<br>
 * Please keep it in sync with the property 'application.main.class' defined in module.ivy
 */
public class Main {

	/**
	 * Simple main.
	 *
	 * @param args
	 *            command line arguments
	 * @throws IOException
	 *             if an error occur
	 */
	public static void main(String[] args) throws IOException {
		MicroUI.start();
		Display.getDisplay().requestShow(new BlackScreenDisplayable());

		Kernel.addFeatureStateListener(new FeatureStateListener() {
			@Override
			public void stateChanged(Feature feature, State previousState) {
				if ((feature.getState() == State.STOPPED)) {
					// Workaround: M0092MEJAUI-2356
					Displayable currentDisplayable = Display.getDisplay().getDisplayable();
					if (currentDisplayable == null || feature == Kernel.getOwner(currentDisplayable)) {
						Display.getDisplay().requestShow(new BlackScreenDisplayable());
					}
				}
			}
		});

		registerConverters();

		ApplicationManagerKF applicationManager = new ApplicationManagerKF();
		// get all systemapps need to be done before creating the ApplicationInstaller (since it'll install all
		// available applications found in the storage)
		Application[] residentApplications = applicationManager.getApplications();

		Storage storage = new StorageKfFs("wadapps"); //$NON-NLS-1$
		ApplicationInstaller applicationInstaller = new PersistentApplicationInstallerKF(applicationManager, storage);

		// register required services.
		SharedServiceRegistry sharedServiceRegistry = SharedServiceFactory.getSharedServiceRegistry();
		sharedServiceRegistry.register(ApplicationManager.class, applicationManager);
		sharedServiceRegistry.register(Storage.class, storage);
		sharedServiceRegistry.register(ApplicationInstaller.class, applicationInstaller);
		sharedServiceRegistry.register(Firmware.class, new FirmwareKF());
		Timer timer = new Timer();
		sharedServiceRegistry.register(Timer.class, timer);
		sharedServiceRegistry.register(ConnectivityManager.class,
				new ConnectivityManagerKF(new HttpPollerConnectivityManager(timer)));

		System.setSecurityManager(new GreenSecurityManager(residentApplications));

		// start all applications.
		StartupHelper.startAllApplications(applicationManager);
	}

	/**
	 * Register Kernel converters.
	 * <p>
	 * If overriding this method, sub-classes MUST this implementation.
	 *
	 * @see Kernel#addConverter(ej.kf.Converter)
	 */
	protected static void registerConverters() {
		// register official Kernel converters
		Kernel.addConverter(new BooleanConverter());
		Kernel.addConverter(new ByteConverter());
		Kernel.addConverter(new CharacterConverter());
		Kernel.addConverter(new DoubleConverter());
		Kernel.addConverter(new FloatConverter());
		Kernel.addConverter(new IntegerConverter());
		Kernel.addConverter(new LongConverter());
		Kernel.addConverter(new ShortConverter());
		Kernel.addConverter(new StringConverter());
		Kernel.addConverter(new InputStreamConverter());
		Kernel.addConverter(new DateConverter());
		Kernel.addConverter(new ListConverter<>());
		Kernel.addConverter(new MapConverter<>());
		Kernel.addConverter(new IProgressMonitorConverter());
	}
}
